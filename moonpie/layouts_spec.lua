-- Copyright (c) 2019 Redfern, Trevor <trevorredfern@gmail.com>
--
-- This software is released under the MIT License.
-- https://opensource.org/licenses/MIT

describe("Layouts", function()
  local layouts = require "moonpie.layouts"
  local Node = require "moonpie.node"

  local parent
  before_each(function()
    parent = Node({ width = 152, layout = layouts.standard })
    parent:layout()
  end)

  describe("standard layout", function()
    it("uses it's parent width to determine it's maximum and defaults to full width", function()
      local test = Node({ layout = layouts.standard }, parent)
      test:layout()
      assert.equals(152, test.box.content.width)
    end)

    it("uses it's own width if provided on the node", function()
      local test = Node({  layout = layouts.standard,  width = 120 })
      test:layout(parent)
      assert.equals(120, test.box.content.width)
    end)

    it("uses the width of its children if display is 'inline'", function()
      local b = Node({ layout = layouts.standard, display = "inline" })
      local c1 = Node({ layout = layouts.standard, width = 30 })
      local c2 = Node({ layout = layouts.standard, width = 34 })
      b:add(c1, c2)

      b:layout(parent)
      assert.equals(64, b.box.content.width)
    end)

    it("shaves off the margin from the width", function()
      local b = Node({ layout = layouts.standard, margin = 12 })
      b:layout(parent)
      assert.equals(128, b.box.content.width)
    end)

    it("shaves off the padding from the content width", function()
      local b = Node({ layout = layouts.standard, padding = 6 })
      b:layout(parent)
      assert.equals(140, b.box.content.width)
    end)

    it("shaves off the border from the content width", function()
      local b = Node({ border = 2 })
      b:layout(parent)
      assert.equals(148, b.box.content.width)
    end)

    it("uses its height if provided on the node", function()
      local b = Node({ height = 493 })
      b:layout(parent)
      assert.equals(493, b.box.content.height)
    end)

    it("updates the layouts of its children with itself as parent", function()
      local child_layout = spy.new(function() end)
      local b = Node({ layout = child_layout, width = 39, height = 39 })
      parent:add(b)
      parent:layout()
      assert.spy(child_layout).was.called()
      assert.spy(child_layout).was.called_with(b, parent)
    end)

    it("keeps the same layout if called multiple times in a row", function()
      local b = Node({ layout = layouts.standard, width = 1, margin = 1, padding = 1, border = 1 })
      local c = Node({layout = layouts.standard, width = 1, height = 1, margin = 1, padding = 1, border = 1 })
      b:add(c)
      b:layout()
      assert.equals(0, b.box.x)
      assert.equals(0, b.box.y)
      assert.equals(0, c.box.x)
      assert.equals(0, c.box.y)
      assert.equals(13, b.box:height())
      assert.equals(7, c.box:height())
      b:layout()
      assert.equals(0, b.box.x)
      assert.equals(0, b.box.y)
      assert.equals(0, c.box.x)
      assert.equals(0, c.box.y)
      assert.equals(13, b.box:height())
      assert.equals(7, c.box:height())
    end)

    describe("Horizontal layout", function()
      it("assigns the position of components after calculating the width of them", function()
        local b = Node()
        local c1 = Node({width = 10 })
        local c2 = Node({width = 20 })
        local c3 = Node({width = 49 })
        b:add(c1, c2, c3)
        b:layout(parent)
        assert.equals(0, c1.box.x)
        assert.equals(0, c1.box.y)
        assert.equals(10, c2.box.x)
        assert.equals(0, c2.box.y)
        assert.equals(30, c3.box.x)
        assert.equals(0, c3.box.y)
      end)

      describe("Child Alignment", function()
        local b = Node()
        local c1 = Node({ width = 10, align = "right" })
        b:add(c1)
        b:layout(parent)
        assert.equals(parent.width - 10, c1.box.x)
      end)

      describe("Wrapping", function()
        local node = Node()
        local big_child = Node({ width = 500, height = 39})
        local little_child = Node({ width = 43, height = 32})
        node:add(big_child, little_child)
        node:layout(parent)

        it("puts a node onto another line if the next node cannot fit onto the line", function()
          assert.equals(0, big_child.box.x)
          assert.equals(0, big_child.box.y)
          assert.equals(0, little_child.box.x)
          assert.equals(39, little_child.box.y)
        end)

        it("calculates it's own height to be the size of all the lines", function()
          assert.equals(71, node.box.content.height)
        end)
      end)

      describe("Margins", function()
        local node = Node({ display = "inline", margin = 5 })
        local child = Node({ margin = 2, width = 10, height = 10 })
        node:add(child)
        node:layout(parent)

        it("starts the content based on the margin", function()
          local x, y = node.box:content_position()
          assert.equals(5, x)
          assert.equals(5, y)
        end)

        it("content area includes the margins of the child", function()
          assert.equals(14, node.box.content.width)
          assert.equals(14, node.box.content.height)
        end)

        it("uses the margins for the total size", function()
          assert.equals(14, child.box:height())
          assert.equals(14, child.box:width())
          assert.equals(24, node.box:height())
          assert.equals(24, node.box:width())
        end)
      end)
    end)
  end)
end)
